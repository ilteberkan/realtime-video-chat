-- profiles tablosuna updated_at sütunu ekle
ALTER TABLE profiles 
ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW();

-- Mevcut kayıtlar için updated_at değerini created_at ile aynı yap
UPDATE profiles 
SET updated_at = created_at 
WHERE updated_at IS NULL; 

-- Moderatör tablosu oluşturma fonksiyonu
CREATE OR REPLACE FUNCTION create_moderators_table()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  CREATE TABLE IF NOT EXISTS moderators (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES auth.users(id) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id)
  );
END;
$$;

-- Kullanıcı çağrıları tablosu
CREATE TABLE IF NOT EXISTS user_calls (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES auth.users(id),
  call_id TEXT NOT NULL,
  duration INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Örnek veri ekle (test için)
DO $$
DECLARE
  user_record RECORD;
BEGIN
  FOR user_record IN SELECT id FROM auth.users LIMIT 50
  LOOP
    INSERT INTO user_calls (user_id, call_id, duration, created_at, updated_at)
    VALUES (
      user_record.id, 
      'call_' || floor(random() * 1000)::text, 
      floor(random() * 600)::integer, 
      NOW() - (random() * interval '30 days'), 
      NOW()
    );
  END LOOP;
END $$;

-- Kullanıcı aktivite günlüğü tablosu
CREATE TABLE IF NOT EXISTS user_activity_logs (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES auth.users(id),
  action TEXT NOT NULL,
  details TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Örnek veri ekle (test için)
DO $$
DECLARE
  user_record RECORD;
  action_type TEXT;
  action_details TEXT;
  log_date TIMESTAMP WITH TIME ZONE;
BEGIN
  FOR user_record IN SELECT id FROM auth.users LIMIT 100
  LOOP
    -- Rastgele eylem seç
    CASE floor(random() * 5)::integer
      WHEN 0 THEN action_type := 'login';
      WHEN 1 THEN action_type := 'call_started';
      WHEN 2 THEN action_type := 'call_ended';
      WHEN 3 THEN action_type := 'profile_updated';
      WHEN 4 THEN action_type := 'message_sent';
    END CASE;
    
    -- Rastgele detay seç
    CASE floor(random() * 5)::integer
      WHEN 0 THEN action_details := 'Kullanıcı giriş yaptı';
      WHEN 1 THEN action_details := 'Görüşme başlatıldı';
      WHEN 2 THEN action_details := 'Görüşme sonlandırıldı';
      WHEN 3 THEN action_details := 'Profil güncellendi';
      WHEN 4 THEN action_details := 'Mesaj gönderildi';
    END CASE;
    
    -- Rastgele tarih oluştur (son 30 gün içinde)
    log_date := NOW() - (random() * interval '30 days');
    
    -- Bugün için de bazı kayıtlar ekle
    IF random() < 0.2 THEN
      log_date := NOW();
    END IF;
    
    -- Aktivite günlüğüne ekle
    INSERT INTO user_activity_logs (user_id, action, details, created_at)
    VALUES (user_record.id, action_type, action_details, log_date);
  END LOOP;
END $$;

-- Bugün için çağrı kayıtları ekle
DO $$
DECLARE
  user_record RECORD;
BEGIN
  FOR user_record IN SELECT id FROM auth.users LIMIT 20
  LOOP
    INSERT INTO user_calls (user_id, call_id, duration, created_at, updated_at)
    VALUES (
      user_record.id, 
      'call_today_' || floor(random() * 1000)::text, 
      floor(random() * 600)::integer, 
      NOW(), 
      NOW()
    );
  END LOOP;
END $$;

-- Son 24 saat için aktivite kayıtları ekle
DO $$
DECLARE
  user_record RECORD;
BEGIN
  FOR user_record IN SELECT id FROM auth.users LIMIT 30
  LOOP
    INSERT INTO user_activity_logs (user_id, action, details, created_at)
    VALUES (
      user_record.id, 
      'login', 
      'Kullanıcı son 24 saat içinde giriş yaptı', 
      NOW() - (random() * interval '24 hours')
    );
  END LOOP;
END $$;

-- Admin tablosu oluşturma fonksiyonu
CREATE OR REPLACE FUNCTION create_admin_table()
RETURNS void
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  CREATE TABLE IF NOT EXISTS admins (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID REFERENCES auth.users(id) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id)
  );
END;
$$;

-- Admin tablosunu oluştur
SELECT create_admin_table();

-- İlk kullanıcıyı admin olarak ekle (eğer yoksa)
DO $$
DECLARE
  first_user_id UUID;
BEGIN
  -- İlk kullanıcıyı al
  SELECT id INTO first_user_id FROM auth.users ORDER BY created_at ASC LIMIT 1;
  
  -- Eğer kullanıcı varsa ve admin tablosunda yoksa ekle
  IF first_user_id IS NOT NULL THEN
    INSERT INTO admins (user_id, created_at, updated_at)
    VALUES (first_user_id, NOW(), NOW())
    ON CONFLICT (user_id) DO NOTHING;
  END IF;
END $$;

-- Mevcut auth.users kullanıcılarını profiles tablosuna ekle
DO $$
DECLARE
  user_record RECORD;
BEGIN
  -- auth.users tablosundaki kullanıcıları al ve profiles tablosuna ekle
  FOR user_record IN 
    SELECT id, email, created_at FROM auth.users 
    WHERE id NOT IN (SELECT id FROM profiles)
  LOOP
    -- Profiles tablosuna ekle
    INSERT INTO profiles (
      id, 
      username, 
      email, 
      created_at, 
      updated_at
    )
    VALUES (
      user_record.id,
      'user_' || substring(user_record.id::text, 1, 8),
      user_record.email,
      user_record.created_at,
      NOW()
    )
    ON CONFLICT (id) DO NOTHING;
    
    -- Aktivite günlüğü ekle
    INSERT INTO user_activity_logs (
      user_id,
      action,
      details,
      created_at
    )
    VALUES (
      user_record.id,
      'profile_created',
      'Profil oluşturuldu',
      NOW()
    );
  END LOOP;
  
  -- Eğer hiç kullanıcı yoksa, admin panelinde test için dummy veriler göster
  IF (SELECT COUNT(*) FROM profiles) = 0 THEN
    -- Dummy kullanıcılar için özel bir tablo oluştur
    CREATE TABLE IF NOT EXISTS dummy_profiles (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      username TEXT NOT NULL,
      email TEXT,
      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    -- Dummy kullanıcılar ekle
    INSERT INTO dummy_profiles (username, email, created_at, updated_at)
    VALUES 
      ('kullanici1', 'kullanici1@example.com', NOW(), NOW()),
      ('kullanici2', 'kullanici2@example.com', NOW(), NOW()),
      ('kullanici3', 'kullanici3@example.com', NOW(), NOW()),
      ('kullanici4', 'kullanici4@example.com', NOW(), NOW()),
      ('kullanici5', 'kullanici5@example.com', NOW(), NOW())
    ON CONFLICT (id) DO NOTHING;
  END IF;
END $$;

-- Kullanıcı banları tablosu
CREATE TABLE IF NOT EXISTS user_bans (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES auth.users(id),
  ban_expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
  reason TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Örnek ban ekle
DO $$
DECLARE
  random_user_id UUID;
BEGIN
  -- Rastgele bir kullanıcı seç
  SELECT id INTO random_user_id FROM profiles ORDER BY RANDOM() LIMIT 1;
  
  -- Eğer kullanıcı varsa ban ekle
  IF random_user_id IS NOT NULL THEN
    INSERT INTO user_bans (user_id, ban_expires_at, reason, created_at, updated_at)
    VALUES (
      random_user_id,
      NOW() + interval '24 hours',
      'Örnek ban sebebi',
      NOW(),
      NOW()
    );
  END IF;
END $$;